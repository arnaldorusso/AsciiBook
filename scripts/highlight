#!/usr/bin/env python

import sys
import re
from xml.dom.minidom import Node, parse, parseString
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import get_formatter_by_name

format = sys.argv[1]
target = sys.argv[2]
path   = sys.argv[3]
xml    = parse(target)

sys.path.append(path)
import syntax

def get_theme(type):
    settings = syntax.PYGMENTS_THEME
    for tags in settings:
        if type in tags: return settings[tags]
    return {}

if format == 'docbook':
    for listing in xml.getElementsByTagName('programlisting'):
        lang = listing.getAttribute('language')
        code = listing.childNodes[0].nodeValue
        text = xml.createTextNode('#:highlight: ' + lang + '\n' + code)
        listing.removeChild(listing.childNodes[0])
        listing.appendChild(text)

elif format == 'fo':
    for block in xml.getElementsByTagName('fo:block'):
        if len(block.childNodes) == 0 or block.childNodes[0].nodeType != Node.TEXT_NODE: continue
        
        pattern = '^#:highlight: (\S+)\n'
        code    = block.childNodes[0].nodeValue
        match   = re.search(pattern, code)
        
        if match == None: continue
        
        lexer     = get_lexer_by_name(match.group(1))
        formatter = get_formatter_by_name('html')
        code      = re.sub(pattern, '', code)
        
        doc = parseString(highlight(code, lexer, formatter))
        block.removeChild(block.childNodes[0])
        
        for node in doc.getElementsByTagName('pre')[0].childNodes:
            if node.nodeType == Node.TEXT_NODE:
                block.appendChild(xml.createTextNode(node.nodeValue))
                continue
            
            theme  = get_theme(node.getAttribute('class'))
            inline = xml.createElement('fo:inline')
            
            inline.setAttribute('color', theme.get('color', '#000'))
            inline.setAttribute('font-style', theme.get('style', 'normal'))
            inline.setAttribute('font-weight', theme.get('weight', 'normal'))
            inline.appendChild(xml.createTextNode(node.childNodes[0].nodeValue))
            block.appendChild(inline)

file = open(target, 'w')
file.write(xml.toxml().encode('utf-8'))
file.close()

